[{"path":"https://mictott.github.io/BiocNMF/articles/BiocNMF.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Fast NMF for Single Cell and Spatial Data with BiocNMF","text":"BiocNMF provides fast non-negative matrix factorization (NMF) SingleCellExperiment SpatialExperiment objects using high-performance RcppML backend. NMF useful dimensionality reduction, feature extraction, identifying patterns genomic data.","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/BiocNMF.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Fast NMF for Single Cell and Spatial Data with BiocNMF","text":"","code":"# From Bioconductor (when available) if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"BiocNMF\")"},{"path":"https://mictott.github.io/BiocNMF/articles/BiocNMF.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick Start","title":"Fast NMF for Single Cell and Spatial Data with BiocNMF","text":"","code":"library(BiocNMF) #> Warning: replacing previous import 'BiocGenerics::sd' by 'stats::sd' when #> loading 'BiocNMF' library(scuttle)"},{"path":"https://mictott.github.io/BiocNMF/articles/BiocNMF.html","id":"basic-usage-with-singlecellexperiment","dir":"Articles","previous_headings":"Quick Start","what":"Basic Usage with SingleCellExperiment","title":"Fast NMF for Single Cell and Spatial Data with BiocNMF","text":"","code":"# Create example data sce <- mockSCE(ngenes = 1000, ncells = 200) sce <- logNormCounts(sce)  # Run NMF with 10 factors sce <- runNMF(sce, k = 10, verbose = FALSE)  # Access results nmf_coords <- reducedDim(sce, \"NMF\") dim(nmf_coords) #> [1] 200  10  # Get basis matrix (gene loadings) basis <- getBasis(sce) dim(basis) #> [1] 1000   10  # Get top features for each factor top_genes <- getTopFeatures(sce, n = 5) head(top_genes, 2) #> $NMF_1 #> [1] \"Gene_0713\" \"Gene_0185\" \"Gene_0195\" \"Gene_0413\" \"Gene_0901\" #>  #> $NMF_2 #> [1] \"Gene_0880\" \"Gene_0397\" \"Gene_0869\" \"Gene_0019\" \"Gene_0690\""},{"path":"https://mictott.github.io/BiocNMF/articles/BiocNMF.html","id":"advanced-usage","dir":"Articles","previous_headings":"Quick Start","what":"Advanced Usage","title":"Fast NMF for Single Cell and Spatial Data with BiocNMF","text":"","code":"# Use different assay and parameters sce <- runNMF(sce, k = 15, assay = \"logcounts\",                name = \"NMF_15\", L1 = c(0.01, 0.01), verbose = FALSE)  # Multiple NMF results can be stored reducedDimNames(sce) #> [1] \"NMF\"    \"NMF_15\""},{"path":"https://mictott.github.io/BiocNMF/articles/BiocNMF.html","id":"consensus-nmf","dir":"Articles","previous_headings":"Quick Start","what":"Consensus NMF","title":"Fast NMF for Single Cell and Spatial Data with BiocNMF","text":"robust results, use consensus NMF runs multiple NMF iterations combines results:","code":"# Run consensus NMF across a range of k values sce <- runConsensusNMF(sce, k_range = 8:12, n_runs = 20, verbose = FALSE)  # Get stability metrics to see optimal k selection stability <- getStabilityMetrics(sce) print(stability) #>    k    stability silhouette reproducibility cophenetic_correlation #> 1  8 0.0080974843  0.5144750      0.26250000                      1 #> 2  9 0.0003724395  0.5150000      0.08333333                      1 #> 3 10 0.0008040201  0.4000237      0.10500000                      1 #> 4 11 0.0009962640  0.4037430      0.11818182                      1 #> 5 12 0.0004184100  0.3114126      0.08333333                      1  # Access consensus results optimal_k <- getOptimalK(sce) geps <- getConsensusGEPs(sce) usage <- getGEPUsage(sce)  # Get top genes for each program top_genes <- getTopGEPFeatures(sce, n = 10) head(top_genes, 2) #> $cNMF_1 #>  [1] \"Gene_0386\" \"Gene_0332\" \"Gene_0006\" \"Gene_0693\" \"Gene_0692\" \"Gene_0632\" #>  [7] \"Gene_0215\" \"Gene_0741\" \"Gene_0017\" \"Gene_0283\" #>  #> $cNMF_2 #>  [1] \"Gene_0690\" \"Gene_0185\" \"Gene_0167\" \"Gene_0713\" \"Gene_0651\" \"Gene_0528\" #>  [7] \"Gene_0811\" \"Gene_0441\" \"Gene_0221\" \"Gene_0387\""},{"path":"https://mictott.github.io/BiocNMF/articles/BiocNMF.html","id":"visualization","dir":"Articles","previous_headings":"Quick Start","what":"Visualization","title":"Fast NMF for Single Cell and Spatial Data with BiocNMF","text":"","code":"# Plot stability metrics (requires ggplot2) if (requireNamespace(\"ggplot2\", quietly = TRUE)) {   plotStability(sce)   plotGEPs(sce, programs = 1:3, n_genes = 15) }"},{"path":"https://mictott.github.io/BiocNMF/articles/BiocNMF.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Fast NMF for Single Cell and Spatial Data with BiocNMF","text":"","code":"sessionInfo() #> R version 4.4.3 Patched (2025-02-28 r87922) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sequoia 15.6.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] scuttle_1.16.0              BiocNMF_0.99.0              #>  [3] SingleCellExperiment_1.28.1 SummarizedExperiment_1.36.0 #>  [5] Biobase_2.66.0              GenomicRanges_1.58.0        #>  [7] GenomeInfoDb_1.42.3         IRanges_2.40.1              #>  [9] S4Vectors_0.44.0            MatrixGenerics_1.18.1       #> [11] matrixStats_1.5.0           BiocGenerics_0.52.0         #> [13] BiocStyle_2.34.0            #>  #> loaded via a namespace (and not attached): #>  [1] RcppML_0.3.7            sass_0.4.9              SparseArray_1.6.2       #>  [4] lattice_0.22-6          digest_0.6.37           evaluate_1.0.3          #>  [7] grid_4.4.3              bookdown_0.42           fastmap_1.2.0           #> [10] jsonlite_1.9.1          Matrix_1.7-3            BiocManager_1.30.25     #> [13] httr_1.4.7              UCSC.utils_1.2.0        codetools_0.2-20        #> [16] textshaping_1.0.0       jquerylib_0.1.4         abind_1.4-8             #> [19] cli_3.6.4               rlang_1.1.5             crayon_1.5.3            #> [22] XVector_0.46.0          cachem_1.1.0            DelayedArray_0.32.0     #> [25] yaml_2.3.10             S4Arrays_1.6.0          beachmat_2.22.0         #> [28] parallel_4.4.3          tools_4.4.3             BiocParallel_1.40.0     #> [31] GenomeInfoDbData_1.2.13 R6_2.6.1                lifecycle_1.0.4         #> [34] zlibbioc_1.52.0         fs_1.6.5                htmlwidgets_1.6.4       #> [37] ragg_1.5.0              desc_1.4.3              pkgdown_2.1.3           #> [40] bslib_0.9.0             Rcpp_1.0.14             systemfonts_1.2.1       #> [43] xfun_0.51               knitr_1.49              htmltools_0.5.8.1       #> [46] rmarkdown_2.29          compiler_4.4.3"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"introduction-to-consensus-nmf","dir":"Articles","previous_headings":"","what":"Introduction to Consensus NMF","title":"Consensus NMF with BiocNMF","text":"Consensus Non-negative Matrix Factorization (cNMF) addresses fundamental limitation standard NMF: instability across random initializations. standard NMF can produce different results different random seeds, cNMF provides robust, reproducible gene expression programs consensus clustering.","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"the-stability-problem","dir":"Articles","previous_headings":"Introduction to Consensus NMF","what":"The Stability Problem","title":"Consensus NMF with BiocNMF","text":"Standard NMF optimization non-convex, leading multiple local optima. means: - Different random initializations produce different solutions - Gene expression programs may reproducible - Optimal k selection becomes challenging - Biological interpretation can inconsistent","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"the-consensus-solution","dir":"Articles","previous_headings":"Introduction to Consensus NMF","what":"The Consensus Solution","title":"Consensus NMF with BiocNMF","text":"cNMF, developed Kotliar et al.Â (eLife 2019), solves : Multiple NMF runs different initializations Consensus clustering group similar gene expression programs Stability metrics objective k selection Robust final programs clustering refitting","code":"library(BiocNMF) library(SingleCellExperiment) library(scuttle) library(scater) library(ggplot2) library(pheatmap)"},{"path":[]},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"multiple-nmf-factorizations","dir":"Articles","previous_headings":"The cNMF Algorithm > Step-by-Step Methodology","what":"1. Multiple NMF Factorizations","title":"Consensus NMF with BiocNMF","text":"k value, run NMF many times (typically 100-200) different random initializations:","code":"For k in k_range:     For run in 1:n_runs:         W[k,run], H[k,run] = NMF(X, k, random_seed=run)"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"gene-expression-program-collection","dir":"Articles","previous_headings":"The cNMF Algorithm > Step-by-Step Methodology","what":"2. Gene Expression Program Collection","title":"Consensus NMF with BiocNMF","text":"Collect gene expression programs (columns W matrices) across runs.","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"density-filtering","dir":"Articles","previous_headings":"The cNMF Algorithm > Step-by-Step Methodology","what":"3. Density Filtering","title":"Consensus NMF with BiocNMF","text":"Remove outlier programs using local density estimation: - Calculate pairwise cosine similarities programs - Compute local density program - Filter programs density threshold - Reduces noise computational burden","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"consensus-clustering","dir":"Articles","previous_headings":"The cNMF Algorithm > Step-by-Step Methodology","what":"4. Consensus Clustering","title":"Consensus NMF with BiocNMF","text":"Cluster similar programs using k-means: - Apply k-means clustering filtered programs - Group similar gene expression programs together - cluster represents consensus program","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"consensus-matrix-construction","dir":"Articles","previous_headings":"The cNMF Algorithm > Step-by-Step Methodology","what":"5. Consensus Matrix Construction","title":"Consensus NMF with BiocNMF","text":"Build consensus matrix showing co-clustering frequencies: - pair programs: often cluster together - Provides stability assessment k value - Used final stability metrics","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"final-program-selection","dir":"Articles","previous_headings":"The cNMF Algorithm > Step-by-Step Methodology","what":"6. Final Program Selection","title":"Consensus NMF with BiocNMF","text":"Choose optimal k based stability metrics Extract representative programs cluster Refit usage matrix using non-negative least squares","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"implementation-details","dir":"Articles","previous_headings":"The cNMF Algorithm","what":"Implementation Details","title":"Consensus NMF with BiocNMF","text":"BiocNMF implements exact algorithm Kotliar et al.Â key components:","code":"# Conceptual overview (actual implementation is in C++/optimized R) runConsensusNMF <- function(x, k_range, n_runs, ...) {   for (k in k_range) {     # 1. Multiple NMF runs     nmf_runs <- replicate(n_runs, RcppML::nmf(data, k = k))          # 2. Collect all programs     all_programs <- do.call(cbind, lapply(nmf_runs, function(r) r$w))          # 3. Density filtering     filtered_programs <- applyDensityFiltering(all_programs)          # 4. Consensus clustering     clusters <- kmeans(t(filtered_programs), centers = k)          # 5. Build consensus matrix     consensus_mat <- buildConsensusMatrix(clusters)          # 6. Calculate stability metrics     stability <- calculateStabilityMetrics(consensus_mat)   }      # Select optimal k and refit   optimal_k <- selectOptimalK(stability_results)   final_programs <- extractConsensusPrograms(optimal_k)   usage_matrix <- refitUsageMatrix(data, final_programs) }"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"basic-usage","dir":"Articles","previous_headings":"Running Consensus NMF","what":"Basic Usage","title":"Consensus NMF with BiocNMF","text":"","code":"# Create example data with more structure for demonstration set.seed(42) sce <- mockSCE(ngenes = 1000, ncells = 800)  # Add cell type structure n_types <- 5 sce$cell_type <- sample(paste0(\"Type\", 1:n_types), ncol(sce), replace = TRUE)  # Normalize sce <- logNormCounts(sce)  # Add visualization coordinates sce <- runPCA(sce, ncomponents = 20) sce <- runUMAP(sce, dimred = \"PCA\") # Run consensus NMF # Note: Using small parameters for vignette speed # In practice, use n_runs = 100-200 and broader k_range sce <- runConsensusNMF(sce,                         k_range = 4:8,           # Test k values                        n_runs = 20,             # Number of runs per k                        n_cores = 1,             # Parallel cores                        verbose = TRUE)  # Check what was added names(metadata(sce)) #> [1] \"cNMF\" reducedDimNames(sce) #> [1] \"PCA\"  \"UMAP\" \"cNMF\""},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"critical-parameters","dir":"Articles","previous_headings":"Running Consensus NMF > Parameter Selection","what":"Critical Parameters","title":"Consensus NMF with BiocNMF","text":"k_range: Range k values test - Start biologically expected range - Consider 2-3x expected number cell types - Broader ranges provide better stability assessment n_runs: Number NMF runs per k value - runs = better stability estimates - Minimum: 50 runs reasonable estimates - Recommended: 100-200 runs publication quality","code":"# For 5 expected cell types, test: k_range = 3:12    # Conservative range k_range = 2:15    # Broader exploration n_runs = 50      # Quick exploration n_runs = 100     # Standard analysis   n_runs = 200     # High confidence"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"algorithmic-parameters","dir":"Articles","previous_headings":"Running Consensus NMF > Parameter Selection","what":"Algorithmic Parameters","title":"Consensus NMF with BiocNMF","text":"density_threshold: Outlier filtering stringency - Higher values = aggressive filtering - Range: 0.1 (lenient) 0.8 (strict) - Default: 0.5 (balanced) n_cores: Parallel processing - Use available cores - 1 system responsiveness - Scales nearly linearly core count","code":"sce <- runConsensusNMF(sce,                        k_range = 5:15,                        n_runs = 100,                        density_threshold = 0.4,    # Lenient filtering                        n_cores = 4,                # Parallel processing                        seed = 123)                 # Reproducibility"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"consensus-gene-expression-programs","dir":"Articles","previous_headings":"Accessing and Interpreting Results","what":"Consensus Gene Expression Programs","title":"Consensus NMF with BiocNMF","text":"","code":"# Get consensus gene expression programs consensus_geps <- getConsensusGEPs(sce) dim(consensus_geps)  # genes Ã programs #> [1] 1000    4  # Get optimal k selected by algorithm optimal_k <- getOptimalK(sce) cat(\"Optimal k selected:\", optimal_k, \"\\n\") #> Optimal k selected: 4  # Get top genes per program top_genes <- getTopGEPFeatures(sce, n = 15) head(top_genes[[1]])  # Top genes for program 1 #> [1] \"Gene_0273\" \"Gene_0830\" \"Gene_0328\" \"Gene_0792\" \"Gene_0813\" \"Gene_0506\""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"program-usage","dir":"Articles","previous_headings":"Accessing and Interpreting Results","what":"Program Usage","title":"Consensus NMF with BiocNMF","text":"","code":"# Get program usage per cell gep_usage <- getGEPUsage(sce) dim(gep_usage)  # cells Ã programs #> [1] 800   4  # Usage is also stored in reducedDims identical(gep_usage, reducedDim(sce, \"cNMF\")) #> [1] TRUE"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"stability-metrics","dir":"Articles","previous_headings":"Accessing and Interpreting Results","what":"Stability Metrics","title":"Consensus NMF with BiocNMF","text":"","code":"# Get comprehensive stability metrics stability <- getStabilityMetrics(sce) print(stability) #>   k    stability silhouette reproducibility cophenetic_correlation #> 1 4 0.0509493671  0.5022110      0.43750000                      1 #> 2 5 0.0307070707  0.6056696      0.40000000                      1 #> 3 6 0.0004201681  0.2913393      0.06666667                      1 #> 4 7 0.0009249743  0.4442262      0.10000000                      1 #> 5 8 0.0059748428  0.3627133      0.21250000                      1  # Individual metrics explained: # - stability: clustering-based stability (higher = more stable) # - silhouette: silhouette score of consensus clustering # - reproducibility: how often same programs are recovered # - cophenetic_correlation: consensus matrix quality"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"accessing-different-k-values","dir":"Articles","previous_headings":"Accessing and Interpreting Results","what":"Accessing Different k Values","title":"Consensus NMF with BiocNMF","text":"","code":"# Access results for specific k values available_k <- getAvailableK(sce) cat(\"Available k values:\", available_k, \"\\n\") #> Available k values: 4 5 6 7 8  # Get results for k=6 specifically geps_k6 <- getConsensusGEPs(sce, k = 6) usage_k6 <- getGEPUsage(sce, k = 6) dim(geps_k6) #> [1] 1000    6 dim(usage_k6) #> [1] 800   6"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"stability-assessment","dir":"Articles","previous_headings":"Diagnostic Plots","what":"Stability Assessment","title":"Consensus NMF with BiocNMF","text":"important diagnostic stability plot k selection:  Interpretation: - Stability: Primary metric - choose k peak plateau - Silhouette: Quality consensus clustering - Reproducibility: Consistency across runs - Cophenetic: Consensus matrix block structure Look : - Peak stability curve - High silhouette scores (>0.5) - Stable increasing reproducibility - High cophenetic correlation","code":"# Plot stability metrics across k values plotStability(sce)"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"gene-expression-program-heatmaps","dir":"Articles","previous_headings":"Diagnostic Plots","what":"Gene Expression Program Heatmaps","title":"Consensus NMF with BiocNMF","text":"Interpretation: - column = one gene expression program - row = one gene (top contributors shown) - Red = high expression, Blue = low expression - Look distinct, interpretable gene sets","code":"# Plot gene expression programs plotGEPs(sce, programs = 1:getOptimalK(sce), n_genes = 20)"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"program-usage-visualization","dir":"Articles","previous_headings":"Diagnostic Plots","what":"Program Usage Visualization","title":"Consensus NMF with BiocNMF","text":"Interpretation: - panel shows usage one program - Continuous colors = program activity levels - Spatial patterns often reveal biological structures - Look cell type state-specific patterns","code":"# Plot program usage on UMAP plotGEPUsage(sce, programs = 1:min(4, getOptimalK(sce)), reduction = \"UMAP\")"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"manual-k-selection","dir":"Articles","previous_headings":"Advanced Analysis","what":"Manual k Selection","title":"Consensus NMF with BiocNMF","text":"Sometimes may want override automatic k selection:","code":"# Get detailed information about all k values cnmf_info <- getConsensusNMFInfo(sce) print(cnmf_info) #> $k_range #> [1] 4 5 6 7 8 #>  #> $n_runs #> [1] 20 #>  #> $optimal_k #> [1] 4 #>  #> $assay_used #> [1] \"logcounts\" #>  #> $subset_row #> NULL #>  #> $parameters #> $parameters$tol #> [1] 1e-05 #>  #> $parameters$maxit #> [1] 100 #>  #> $parameters$L1 #> [1] 0 0 #>  #> $parameters$n_cores #> [1] 1 #>  #>  #> $available_k_values #> [1] \"4\" \"5\" \"6\" \"7\" \"8\" #>  #> $stability_summary #>        k       stability           silhouette     reproducibility   #>  Min.   :4   Min.   :0.0004202   Min.   :0.2913   Min.   :0.06667   #>  1st Qu.:5   1st Qu.:0.0009250   1st Qu.:0.3627   1st Qu.:0.10000   #>  Median :6   Median :0.0059748   Median :0.4442   Median :0.21250   #>  Mean   :6   Mean   :0.0177953   Mean   :0.4412   Mean   :0.24333   #>  3rd Qu.:7   3rd Qu.:0.0307071   3rd Qu.:0.5022   3rd Qu.:0.40000   #>  Max.   :8   Max.   :0.0509494   Max.   :0.6057   Max.   :0.43750   #>  cophenetic_correlation #>  Min.   :1              #>  1st Qu.:1              #>  Median :1              #>  Mean   :1              #>  3rd Qu.:1              #>  Max.   :1              #>  #> $call #> runConsensusNMF(x = sce, k_range = 4:8, n_runs = 20, verbose = TRUE,  #>     n_cores = 1)  # Force usage of specific k (e.g., k=6) # This changes what getConsensusGEPs() returns by default metadata(sce)$cNMF$cNMF$optimal_k <- 6  # Verify change cat(\"New optimal k:\", getOptimalK(sce), \"\\n\") #> New optimal k: 6"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"program-annotation","dir":"Articles","previous_headings":"Advanced Analysis","what":"Program Annotation","title":"Consensus NMF with BiocNMF","text":"","code":"# Get top genes for biological annotation top_genes_detailed <- getTopGEPFeatures(sce, n = 50)  # Example: annotate programs based on top genes opt_k <- getOptimalK(sce) program_annotations <- character(opt_k) for (i in 1:opt_k) {   top_10 <- head(top_genes_detailed[[i]], 10)   program_annotations[i] <- paste0(\"Program_\", i, \" (\",                                    paste(head(top_10, 3), collapse = \", \"),                                    \"...)\") } print(program_annotations) #> [1] \"Program_1 (Gene_0830, Gene_0273, Gene_0328...)\" #> [2] \"Program_2 (Gene_0830, Gene_0341, Gene_0328...)\" #> [3] \"Program_3 (Gene_0830, Gene_0341, Gene_0273...)\" #> [4] \"Program_4 (Gene_0112, Gene_0273, Gene_0527...)\" #> [5] \"Program_5 (Gene_0830, Gene_0341, Gene_0136...)\" #> [6] \"Program_6 (Gene_0830, Gene_0341, Gene_0273...)\""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"robustness-assessment","dir":"Articles","previous_headings":"Advanced Analysis","what":"Robustness Assessment","title":"Consensus NMF with BiocNMF","text":"","code":"# Test robustness with different parameters sce_alt1 <- runConsensusNMF(sce, k_range = 4:8, n_runs = 50,                             density_threshold = 0.3) sce_alt2 <- runConsensusNMF(sce, k_range = 4:8, n_runs = 50,                             density_threshold = 0.7)  # Compare optimal k selections c(original = getOptimalK(sce),   lenient = getOptimalK(sce_alt1),   strict = getOptimalK(sce_alt2))"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"performance-scaling","dir":"Articles","previous_headings":"Computational Considerations","what":"Performance Scaling","title":"Consensus NMF with BiocNMF","text":"cNMF computationally intensive. Runtime scales : n_runs: Linear scaling (100 runs = 2x time vs 50 runs) k_range: Linear scaling (k adds ~n_runs time) Data size: Quadratic min(genes, cells) n_cores: Near-linear speedup parallelization","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"memory-requirements","dir":"Articles","previous_headings":"Computational Considerations","what":"Memory Requirements","title":"Consensus NMF with BiocNMF","text":"Memory usage depends : - Storing intermediate NMF results - Consensus matrix construction - Peak usage clustering steps large datasets (>50k cells), consider: - Reducing n_runs (minimum 50) - Narrower k_range based prior knowledge - Using high-memory computing environments","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"optimization-tips","dir":"Articles","previous_headings":"Computational Considerations","what":"Optimization Tips","title":"Consensus NMF with BiocNMF","text":"","code":"# For large datasets sce <- runConsensusNMF(sce,                        k_range = 8:12,          # Focused range                        n_runs = 75,             # Reduced runs                        n_cores = 8,             # Max parallelization                        density_threshold = 0.6) # Aggressive filtering  # For exploration with quick turnaround sce <- runConsensusNMF(sce,                        k_range = 5:10,                        n_runs = 25,             # Very fast                        n_cores = 4)"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"cell-type-assignment","dir":"Articles","previous_headings":"Integration with Downstream Analysis","what":"Cell Type Assignment","title":"Consensus NMF with BiocNMF","text":"","code":"# Assign cells to dominant programs usage_matrix <- getGEPUsage(sce) dominant_programs <- apply(usage_matrix, 1, which.max)  # Add to cell metadata colData(sce)$dominant_program <- paste0(\"Program_\", dominant_programs)  # Compare with original cell types (if available) table(colData(sce)$dominant_program, colData(sce)$cell_type) #>             #>             Type1 Type2 Type3 Type4 Type5 #>   Program_1    38    34    38    38    37 #>   Program_2    49    47    52    51    59 #>   Program_3    42    47    56    49    52 #>   Program_4    27    24    19    23    18"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"differential-program-usage","dir":"Articles","previous_headings":"Integration with Downstream Analysis","what":"Differential Program Usage","title":"Consensus NMF with BiocNMF","text":"","code":"# Test for differential program usage between conditions library(scran)  # Example: differential usage between cell types colData(sce)$program_1_usage <- usage_matrix[, 1]  # Statistical testing results <- findMarkers(sce,                        groups = sce$cell_type,                       test.type = \"t\")"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"gene-set-enrichment","dir":"Articles","previous_headings":"Integration with Downstream Analysis","what":"Gene Set Enrichment","title":"Consensus NMF with BiocNMF","text":"","code":"# Example pathway enrichment (requires additional packages) library(clusterProfiler) library(org.Hs.eg.db)  # Get top genes for program 1 program_1_genes <- getTopGEPFeatures(sce, n = 100)[[1]]  # Run enrichment analysis enrichment <- enrichGO(gene = program_1_genes,                       OrgDb = org.Hs.eg.db,                       ont = \"BP\",                       readable = TRUE)"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"parameter-selection-guidelines","dir":"Articles","previous_headings":"Best Practices","what":"Parameter Selection Guidelines","title":"Consensus NMF with BiocNMF","text":"Start broad: Use wide k_range initial exploration Sufficient runs: Minimum 50 runs, prefer 100+ final analysis Multiple thresholds: Test different density_threshold values Reproducibility: Use set.seed() reproducible results","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"quality-control","dir":"Articles","previous_headings":"Best Practices","what":"Quality Control","title":"Consensus NMF with BiocNMF","text":"Stability curves: show clear peaks plateaus Program interpretation: Programs biologically meaningful Usage patterns: correlate known cell types/states Consistency: Results robust parameter changes","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"common-pitfalls","dir":"Articles","previous_headings":"Best Practices","what":"Common Pitfalls","title":"Consensus NMF with BiocNMF","text":"runs: <50 runs can give unstable results Narrow k_range: May miss optimal k value -interpretation: Programs may always correspond cell types Ignoring stability: Donât just pick k based expectations","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"comparison-with-standard-nmf","dir":"Articles","previous_headings":"","what":"Comparison with Standard NMF","title":"Consensus NMF with BiocNMF","text":"","code":"# Run standard NMF with same k opt_k <- getOptimalK(sce) sce <- runNMF(sce, k = opt_k, name = \"StandardNMF\")  # Compare stability by running multiple times set.seed(123) nmf_runs <- replicate(10, {   sce_temp <- runNMF(sce, k = opt_k, verbose = FALSE)   getBasis(sce_temp)[, 1]  # First program }, simplify = FALSE)  # Calculate coefficient of variation across runs cv_standard <- apply(do.call(cbind, nmf_runs), 1, function(x) sd(x)/mean(x))  # Compare with cNMF stability (programs should be more stable) cnmf_program_1 <- getConsensusGEPs(sce)[, 1]  cat(\"Standard NMF variability (mean CV):\", round(mean(cv_standard, na.rm = TRUE), 3), \"\\n\") cat(\"cNMF provides stable programs across runs\\n\")"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Consensus NMF with BiocNMF","text":"","code":"sessionInfo() #> R version 4.4.3 Patched (2025-02-28 r87922) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sequoia 15.6.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] scran_1.34.0                pheatmap_1.0.12             #>  [3] scater_1.34.1               ggplot2_3.5.1               #>  [5] scuttle_1.16.0              BiocNMF_0.99.0              #>  [7] SingleCellExperiment_1.28.1 SummarizedExperiment_1.36.0 #>  [9] Biobase_2.66.0              GenomicRanges_1.58.0        #> [11] GenomeInfoDb_1.42.3         IRanges_2.40.1              #> [13] S4Vectors_0.44.0            MatrixGenerics_1.18.1       #> [15] matrixStats_1.5.0           BiocGenerics_0.52.0         #> [17] BiocStyle_2.34.0            #>  #> loaded via a namespace (and not attached): #>  [1] gridExtra_2.3           rlang_1.1.5             magrittr_2.0.3          #>  [4] compiler_4.4.3          systemfonts_1.2.1       vctrs_0.6.5             #>  [7] pkgconfig_2.0.3         crayon_1.5.3            fastmap_1.2.0           #> [10] XVector_0.46.0          labeling_0.4.3          rmarkdown_2.29          #> [13] UCSC.utils_1.2.0        ggbeeswarm_0.7.2        ragg_1.5.0              #> [16] xfun_0.51               bluster_1.16.0          zlibbioc_1.52.0         #> [19] cachem_1.1.0            beachmat_2.22.0         jsonlite_1.9.1          #> [22] DelayedArray_0.32.0     BiocParallel_1.40.0     irlba_2.3.5.1           #> [25] parallel_4.4.3          cluster_2.1.8.1         R6_2.6.1                #> [28] bslib_0.9.0             RColorBrewer_1.1-3      limma_3.62.2            #> [31] jquerylib_0.1.4         Rcpp_1.0.14             bookdown_0.42           #> [34] knitr_1.49              FNN_1.1.4.1             Matrix_1.7-3            #> [37] igraph_2.1.4            tidyselect_1.2.1        abind_1.4-8             #> [40] yaml_2.3.10             viridis_0.6.5           codetools_0.2-20        #> [43] lattice_0.22-6          tibble_3.2.1            withr_3.0.2             #> [46] evaluate_1.0.3          desc_1.4.3              pillar_1.10.1           #> [49] BiocManager_1.30.25     generics_0.1.3          munsell_0.5.1           #> [52] scales_1.3.0            glue_1.8.0              metapod_1.14.0          #> [55] tools_4.4.3             BiocNeighbors_2.0.1     ScaledMatrix_1.14.0     #> [58] locfit_1.5-9.12         RcppML_0.3.7            fs_1.6.5                #> [61] grid_4.4.3              edgeR_4.4.2             colorspace_2.1-1        #> [64] GenomeInfoDbData_1.2.13 beeswarm_0.4.0          BiocSingular_1.22.0     #> [67] vipor_0.4.7             cli_3.6.4               rsvd_1.0.5              #> [70] textshaping_1.0.0       S4Arrays_1.6.0          viridisLite_0.4.2       #> [73] dplyr_1.1.4             uwot_0.2.3              gtable_0.3.6            #> [76] sass_0.4.9              digest_0.6.37           SparseArray_1.6.2       #> [79] ggrepel_0.9.6           dqrng_0.4.1             htmlwidgets_1.6.4       #> [82] farver_2.1.2            htmltools_0.5.8.1       pkgdown_2.1.3           #> [85] lifecycle_1.0.4         httr_1.4.7              statmod_1.5.0"},{"path":"https://mictott.github.io/BiocNMF/articles/consensus-nmf.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Consensus NMF with BiocNMF","text":"Kotliar D, Veres , Nagy MA, et al.Â Identifying gene expression programs cell-type identity cellular activity single-cell RNA-Seq. eLife. 2019;8:e43803. DeBruine ZJ, Melcher K, Triche TJ. High-performance non-negative matrix factorization large single cell data. bioRxiv. 2021. Lee DD, Seung HS. Learning parts objects non-negative matrix factorization. Nature. 1999;401(6755):788-791.","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"introduction-to-non-negative-matrix-factorization","dir":"Articles","previous_headings":"","what":"Introduction to Non-negative Matrix Factorization","title":"Getting Started with BiocNMF","text":"Non-negative Matrix Factorization (NMF) powerful dimensionality reduction technique decomposes non-negative data matrix two non-negative factor matrices. single-cell spatial genomics data, NMF provides biologically interpretable gene expression programs usage patterns across cells.","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"mathematical-foundation","dir":"Articles","previous_headings":"Introduction to Non-negative Matrix Factorization","what":"Mathematical Foundation","title":"Getting Started with BiocNMF","text":"Given gene expression matrix X (genes Ã cells) non-negative values, NMF factorizes : X â W Ã H : - W basis matrix (genes Ã k programs) containing gene expression programs - H coefficient matrix (k programs Ã cells) containing program usage per cell - k number latent factors (gene expression programs)","code":""},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"biological-interpretability","dir":"Articles","previous_headings":"Introduction to Non-negative Matrix Factorization > Why NMF for Single-cell and Spatial Data?","what":"Biological Interpretability","title":"Getting Started with BiocNMF","text":"Unlike PCA linear methods, NMFâs non-negativity constraint ensures : - Gene expression programs contain positive gene weights - Cell usage patterns additive combinations programs - Results directly correspond biological processes","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"advantages-over-traditional-methods","dir":"Articles","previous_headings":"Introduction to Non-negative Matrix Factorization > Why NMF for Single-cell and Spatial Data?","what":"Advantages over Traditional Methods","title":"Getting Started with BiocNMF","text":"Parts-based decomposition: Identifies co-expressed gene modules Sparse representations: Naturally selects relevant genes per program Additive mixing: Cells can express multiple programs simultaneously Robust noise: Less sensitive technical artifacts correlation-based methods","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"applications-in-genomics","dir":"Articles","previous_headings":"Introduction to Non-negative Matrix Factorization > Why NMF for Single-cell and Spatial Data?","what":"Applications in Genomics","title":"Getting Started with BiocNMF","text":"Cell type identification: Programs often correspond cell type signatures Pathway analysis: Programs capture coordinated biological processes Spatial patterns: Identifies spatially coherent expression programs Temporal dynamics: Tracks program changes across conditions/time","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"why-rcppml","dir":"Articles","previous_headings":"","what":"Why RcppML?","title":"Getting Started with BiocNMF","text":"BiocNMF uses RcppML package computational backend several key advantages:","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"performance-benefits","dir":"Articles","previous_headings":"Why RcppML?","what":"Performance Benefits","title":"Getting Started with BiocNMF","text":"C++ implementation: Orders magnitude faster R-based alternatives Memory efficient: Optimized large single-cell datasets Parallel processing: Multi-core support faster computation Sparse matrix support: Handles typical sparse single-cell data efficiently","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"algorithmic-advantages","dir":"Articles","previous_headings":"Why RcppML?","what":"Algorithmic Advantages","title":"Getting Started with BiocNMF","text":"Robust convergence: Uses coordinate descent proven convergence guarantees Multiple initialization: Supports various initialization strategies Regularization options: L1/L2 penalties sparsity smoothness Missing value handling: Graceful handling dropout events","code":"library(BiocNMF) #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, saveRDS, setdiff, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following object is masked from 'package:utils': #>  #>     findMatches #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians #> Warning: replacing previous import 'BiocGenerics::sd' by 'stats::sd' when #> loading 'BiocNMF' library(SingleCellExperiment) library(scuttle) library(scater) #> Loading required package: ggplot2 #>  #> Attaching package: 'scater' #> The following object is masked from 'package:BiocNMF': #>  #>     runNMF library(ggplot2)"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"preparing-your-data","dir":"Articles","previous_headings":"Basic NMF Analysis","what":"Preparing Your Data","title":"Getting Started with BiocNMF","text":"","code":"# Create example single-cell data set.seed(42) sce <- mockSCE(ngenes = 1000, ncells = 500)  # Add some structure to make NMF more interesting sce$cell_type <- sample(c(\"TypeA\", \"TypeB\", \"TypeC\"), ncol(sce), replace = TRUE)  # Normalize the data sce <- logNormCounts(sce)  # Add reduced dimensions for visualization sce <- runPCA(sce, ncomponents = 20) sce <- runUMAP(sce, dimred = \"PCA\")"},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"running-nmf","dir":"Articles","previous_headings":"Basic NMF Analysis","what":"Running NMF","title":"Getting Started with BiocNMF","text":"core function runNMF() performs standard NMF decomposition:","code":"# Run NMF with 8 programs sce <- runNMF(sce, k = 8, verbose = FALSE)  # Check what was added to the object reducedDimNames(sce) names(metadata(sce))"},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"accessing-results","dir":"Articles","previous_headings":"Basic NMF Analysis","what":"Accessing Results","title":"Getting Started with BiocNMF","text":"BiocNMF provides convenient accessor functions:","code":"# Get coefficient matrix (cell usage of programs) coefficients <- getCoefficients(sce) dim(coefficients)  # cells Ã programs  # Get basis matrix (gene expression programs) basis <- getBasis(sce) dim(basis)  # genes Ã programs  # Get top contributing genes per program top_genes <- getTopFeatures(sce, n = 10) head(top_genes, 2)"},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"visualization","dir":"Articles","previous_headings":"Basic NMF Analysis","what":"Visualization","title":"Getting Started with BiocNMF","text":"","code":"# Plot program usage on UMAP plotReducedDim(sce, dimred = \"UMAP\", colour_by = \"NMF_1\", point_size = 0.8) +   scale_color_viridis_c(name = \"Program 1\\nUsage\") +   ggtitle(\"NMF Program 1 Usage\") # Heatmap of top genes per program library(pheatmap)  # Get top 20 genes per program top_genes_20 <- getTopFeatures(sce, n = 20) top_gene_names <- unique(unlist(top_genes_20))  # Create matrix of top genes Ã programs basis_subset <- basis[top_gene_names, ]  # Plot heatmap pheatmap(basis_subset,           scale = \"row\",          cluster_cols = FALSE,          show_rownames = FALSE,          main = \"Gene Expression Programs (Top 20 genes per program)\",          color = colorRampPalette(c(\"blue\", \"white\", \"red\"))(100))"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"choosing-k-number-of-programs","dir":"Articles","previous_headings":"Parameter Selection","what":"Choosing k (Number of Programs)","title":"Getting Started with BiocNMF","text":"number programs k critical parameter. Consider:","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"biological-factors","dir":"Articles","previous_headings":"Parameter Selection > Choosing k (Number of Programs)","what":"Biological Factors","title":"Getting Started with BiocNMF","text":"Expected number cell types/states Complexity biological processes Dataset size heterogeneity","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"computational-approaches","dir":"Articles","previous_headings":"Parameter Selection > Choosing k (Number of Programs)","what":"Computational Approaches","title":"Getting Started with BiocNMF","text":"Reconstruction error: Plot error vs k find elbow point Stability metrics: Use consensus NMF (see cNMF vignette) Cross-validation: Hold-validation approaches","code":"# Test different k values k_values <- c(4, 6, 8, 10, 12) reconstruction_errors <- numeric(length(k_values))  for (i in seq_along(k_values)) {   sce_temp <- runNMF(sce, k = k_values[i], verbose = FALSE)   reconstructed <- reconstructNMF(sce_temp)      # Calculate reconstruction error (Frobenius norm)   original_matrix <- assay(sce_temp, \"logcounts\")   reconstruction_errors[i] <- norm(original_matrix - reconstructed, type = \"F\") }  # Plot reconstruction error error_df <- data.frame(k = k_values, error = reconstruction_errors) ggplot(error_df, aes(x = k, y = error)) +   geom_line() +   geom_point(size = 3) +   labs(x = \"Number of Programs (k)\",         y = \"Reconstruction Error\",        title = \"NMF Reconstruction Error vs k\") +   theme_minimal()"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"matrix-selection","dir":"Articles","previous_headings":"Parameter Selection > Other Important Parameters","what":"Matrix Selection","title":"Getting Started with BiocNMF","text":"assay: assay use (typically âlogcountsâ âcountsâ) Raw counts Poisson NMF, log-normalized Gaussian","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"algorithmic-parameters","dir":"Articles","previous_headings":"Parameter Selection > Other Important Parameters","what":"Algorithmic Parameters","title":"Getting Started with BiocNMF","text":"seed: Set reproducible results tol: Convergence tolerance (default usually sufficient) maxit: Maximum iterations (increase difficult convergence)","code":"# Example with custom parameters sce <- runNMF(sce,                k = 8,               assay = \"logcounts\",               seed = 123,               tol = 1e-6,               maxit = 1000,               name = \"NMF_custom\")"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"working-with-different-object-types","dir":"Articles","previous_headings":"Integration with Bioconductor Workflows","what":"Working with Different Object Types","title":"Getting Started with BiocNMF","text":"","code":"# SingleCellExperiment sce <- runNMF(sce, k = 8)  # SpatialExperiment (requires SpatialExperiment package) # spe <- runNMF(spe, k = 8)  # Can also work with SummarizedExperiment # se <- runNMF(se, k = 8)"},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"downstream-analysis","dir":"Articles","previous_headings":"Integration with Bioconductor Workflows","what":"Downstream Analysis","title":"Getting Started with BiocNMF","text":"","code":"# Add NMF coordinates to metadata for downstream tools colData(sce)$NMF_1 <- reducedDim(sce, \"NMF\")[, 1] colData(sce)$NMF_2 <- reducedDim(sce, \"NMF\")[, 2]  # Use in differential expression library(scran) markers <- findMarkers(sce, groups = sce$cell_type,                        block = cut(colData(sce)$NMF_1, 3))"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"data-preprocessing","dir":"Articles","previous_headings":"Best Practices","what":"Data Preprocessing","title":"Getting Started with BiocNMF","text":"Quality control: Remove low-quality cells genes Normalization: Use log-normalized counts applications Feature selection: Consider highly variable genes large datasets Scaling: Generally needed due NMFâs scale invariance","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"interpretation-guidelines","dir":"Articles","previous_headings":"Best Practices","what":"Interpretation Guidelines","title":"Getting Started with BiocNMF","text":"Program naming: Annotate programs based top genes GO enrichment Cell assignment: Use dominant program soft clustering approaches Validation: Compare known markers biological expectations Robustness: Test different k values random seeds","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"performance-tips","dir":"Articles","previous_headings":"Best Practices","what":"Performance Tips","title":"Getting Started with BiocNMF","text":"Subset genes: Use top variable genes large datasets Parallel processing: Utilize multiple cores available Memory management: Consider data sparsity object size Batch processing: Process large datasets chunks needed","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started with BiocNMF","text":"robust sophisticated analysis, consider: Consensus NMF: See detailed cNMF vignette stability analysis Program annotation: Use gene set enrichment analysis Trajectory analysis: Combine NMF pseudotime methods Spatial analysis: Apply spatial transcriptomics data","code":""},{"path":"https://mictott.github.io/BiocNMF/articles/getting-started.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Getting Started with BiocNMF","text":"","code":"sessionInfo() #> R version 4.4.3 Patched (2025-02-28 r87922) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sequoia 15.6.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: America/New_York #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] scater_1.34.1               ggplot2_3.5.1               #>  [3] scuttle_1.16.0              BiocNMF_0.99.0              #>  [5] SingleCellExperiment_1.28.1 SummarizedExperiment_1.36.0 #>  [7] Biobase_2.66.0              GenomicRanges_1.58.0        #>  [9] GenomeInfoDb_1.42.3         IRanges_2.40.1              #> [11] S4Vectors_0.44.0            MatrixGenerics_1.18.1       #> [13] matrixStats_1.5.0           BiocGenerics_0.52.0         #> [15] BiocStyle_2.34.0            #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1        viridisLite_0.4.2       dplyr_1.1.4             #>  [4] vipor_0.4.7             viridis_0.6.5           fastmap_1.2.0           #>  [7] digest_0.6.37           rsvd_1.0.5              RcppML_0.3.7            #> [10] lifecycle_1.0.4         magrittr_2.0.3          compiler_4.4.3          #> [13] rlang_1.1.5             sass_0.4.9              tools_4.4.3             #> [16] yaml_2.3.10             FNN_1.1.4.1             knitr_1.49              #> [19] S4Arrays_1.6.0          htmlwidgets_1.6.4       DelayedArray_0.32.0     #> [22] abind_1.4-8             BiocParallel_1.40.0     withr_3.0.2             #> [25] desc_1.4.3              grid_4.4.3              beachmat_2.22.0         #> [28] colorspace_2.1-1        scales_1.3.0            cli_3.6.4               #> [31] rmarkdown_2.29          crayon_1.5.3            ragg_1.5.0              #> [34] generics_0.1.3          httr_1.4.7              ggbeeswarm_0.7.2        #> [37] cachem_1.1.0            zlibbioc_1.52.0         parallel_4.4.3          #> [40] BiocManager_1.30.25     XVector_0.46.0          vctrs_0.6.5             #> [43] Matrix_1.7-3            jsonlite_1.9.1          bookdown_0.42           #> [46] BiocSingular_1.22.0     BiocNeighbors_2.0.1     ggrepel_0.9.6           #> [49] irlba_2.3.5.1           beeswarm_0.4.0          systemfonts_1.2.1       #> [52] jquerylib_0.1.4         glue_1.8.0              pkgdown_2.1.3           #> [55] codetools_0.2-20        uwot_0.2.3              gtable_0.3.6            #> [58] UCSC.utils_1.2.0        ScaledMatrix_1.14.0     munsell_0.5.1           #> [61] tibble_3.2.1            pillar_1.10.1           htmltools_0.5.8.1       #> [64] GenomeInfoDbData_1.2.13 R6_2.6.1                textshaping_1.0.0       #> [67] evaluate_1.0.3          lattice_0.22-6          bslib_0.9.0             #> [70] Rcpp_1.0.14             gridExtra_2.3           SparseArray_1.6.2       #> [73] xfun_0.51               fs_1.6.5                pkgconfig_2.0.3"},{"path":"https://mictott.github.io/BiocNMF/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Totty. Author, maintainer.","code":""},{"path":"https://mictott.github.io/BiocNMF/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Totty M (2025). BiocNMF: Fast Non-negative Matrix Factorization Single Cell Spatial Data. R package version 0.99.0, https://mictott.github.io/BiocNMF/, https://github.com/MicTott/BiocNMF.","code":"@Manual{,   title = {BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data},   author = {Michael Totty},   year = {2025},   note = {R package version 0.99.0, https://mictott.github.io/BiocNMF/},   url = {https://github.com/MicTott/BiocNMF}, }"},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"biocnmf","dir":"","previous_headings":"","what":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"Fast Non-negative Matrix Factorization Single Cell Spatial Data using RcppML","code":""},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"BiocNMF provides high-performance non-negative matrix factorization (NMF) methods SingleCellExperiment SpatialExperiment objects. package features: Fast NMF: Uses RcppML backend high-performance matrix factorization Consensus NMF: Implements true consensus clustering methodology Kotliar et al.Â (eLife 2019) Bioconductor Integration: Seamless workflow SingleCellExperiment SpatialExperiment objects Rich Diagnostics: Comprehensive stability metrics visualization functions","code":""},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"standard-nmf","dir":"","previous_headings":"Features","what":"Standard NMF","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"runNMF() - Fast NMF using RcppML backend Results stored reducedDims() basis metadata()","code":""},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"consensus-nmf-cnmf","dir":"","previous_headings":"Features","what":"Consensus NMF (cNMF)","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"runConsensusNMF() - True consensus clustering implementation Density filtering remove outlier gene programs K-means clustering gene expression programs across runs Clustering-based stability metrics optimal K selection Non-negative least squares refitting optimal reconstruction","code":""},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"accessor-functions","dir":"","previous_headings":"Features","what":"Accessor Functions","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"getConsensusGEPs() - Extract consensus gene expression programs getGEPUsage() - Get program usage per cell getStabilityMetrics() - Clustering stability metrics getTopGEPFeatures() - Top contributing genes per program","code":""},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"visualization","dir":"","previous_headings":"Features","what":"Visualization","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"plotStability() - Stability metrics K selection plotGEPs() - Gene expression program heatmaps plotGEPUsage() - Program usage reduced dimensions","code":""},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"","code":"# Install from GitHub if (!requireNamespace(\"devtools\", quietly = TRUE))     install.packages(\"devtools\") devtools::install_github(\"MicTott/BiocNMF\")  # Load package library(BiocNMF)"},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"","code":"library(BiocNMF) library(scuttle)  # Create example data sce <- mockSCE(ngenes = 1000, ncells = 500) sce <- logNormCounts(sce)  # Standard NMF sce <- runNMF(sce, k = 10) nmf_coords <- reducedDim(sce, \"NMF\")  # Consensus NMF for robust gene expression programs sce <- runConsensusNMF(sce, k_range = 5:15, n_runs = 100)  # Access results geps <- getConsensusGEPs(sce)           # Gene expression programs usage <- getGEPUsage(sce)               # Cell usage optimal_k <- getOptimalK(sce)           # Selected K value top_genes <- getTopGEPFeatures(sce)     # Top genes per program  # Visualize results plotStability(sce)                      # K selection plot plotGEPs(sce, programs = 1:5)           # Program heatmap"},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"consensus-nmf-algorithm","dir":"","previous_headings":"Methodology","what":"Consensus NMF Algorithm","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"BiocNMF implements consensus clustering approach Kotliar et al.Â (2019): Multiple NMF runs: Generate many gene expression programs Density filtering: Remove outlier programs using local density Consensus clustering: Group similar programs k-means Stability assessment: Clustering-based metrics K selection Matrix refitting: Optimal usage via non-negative least squares approach provides much robust stable gene expression programs compared simple averaging methods.","code":""},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"R (>= 4.3.0) Bioconductor packages: SingleCellExperiment, SummarizedExperiment RcppML fast NMF computation ggplot2 visualization (suggested)","code":""},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"use BiocNMF research, please cite: original consensus NMF paper: Kotliar et al.Â (2019) âIdentifying gene expression programs cell-type identity cellular activity single-cell RNA-Seqâ eLife RcppML: DeBruine et al.Â (2021) âHigh-performance non-negative matrix factorization large single cell dataâ","code":""},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"package licensed Artistic-2.0 license.","code":""},{"path":"https://mictott.github.io/BiocNMF/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data","text":"Please report issues GitHub Issues.","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/BiocNMF-package.html","id":null,"dir":"Reference","previous_headings":"","what":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data â BiocNMF-package","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data â BiocNMF-package","text":"package provides high-performance non-negative matrix factorization (NMF) methods SingleCellExperiment SpatialExperiment objects using RcppML backend. enables efficient dimensionality reduction, feature extraction, pattern discovery single-cell spatial genomics data, seamless integration Bioconductor workflows.","code":""},{"path":[]},{"path":"https://mictott.github.io/BiocNMF/reference/BiocNMF-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BiocNMF: Fast Non-negative Matrix Factorization for Single Cell and Spatial Data â BiocNMF-package","text":"Maintainer: Michael Totty mictott@gmail.com","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/applyDensityFiltering.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply density filtering to remove outlier spectra â applyDensityFiltering","title":"Apply density filtering to remove outlier spectra â applyDensityFiltering","text":"implements local density filtering similar original cNMF","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/applyDensityFiltering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply density filtering to remove outlier spectra â applyDensityFiltering","text":"","code":"applyDensityFiltering(spectra_matrix, density_threshold = 0.5)"},{"path":"https://mictott.github.io/BiocNMF/reference/applyDensityFiltering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply density filtering to remove outlier spectra â applyDensityFiltering","text":"spectra_matrix Matrix spectra (rows = spectra, cols = features) density_threshold Numeric, threshold density filtering","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/applyDensityFiltering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply density filtering to remove outlier spectra â applyDensityFiltering","text":"List valid indices density scores","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/buildConsensusMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build consensus matrix showing co-clustering frequency â buildConsensusMatrix","title":"Build consensus matrix showing co-clustering frequency â buildConsensusMatrix","text":"Build consensus matrix showing co-clustering frequency","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/buildConsensusMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build consensus matrix showing co-clustering frequency â buildConsensusMatrix","text":"","code":"buildConsensusMatrix(valid_indices, cluster_assignments, n_total_spectra)"},{"path":"https://mictott.github.io/BiocNMF/reference/buildConsensusMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build consensus matrix showing co-clustering frequency â buildConsensusMatrix","text":"valid_indices Indices spectra passed filtering cluster_assignments Cluster assignments filtered spectra n_total_spectra Total number spectra filtering","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/buildConsensusMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build consensus matrix showing co-clustering frequency â buildConsensusMatrix","text":"Matrix showing co-clustering frequency","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/calculateConsensusMatrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate consensus matrices using clustering approach (true cNMF) â calculateConsensusMatrices","title":"Calculate consensus matrices using clustering approach (true cNMF) â calculateConsensusMatrices","text":"implements proper consensus clustering approach Kotliar et al. gene expression programs multiple runs clustered rather averaged.","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/calculateConsensusMatrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate consensus matrices using clustering approach (true cNMF) â calculateConsensusMatrices","text":"","code":"calculateConsensusMatrices(   nmf_runs,   k,   feature_names,   sample_names,   density_threshold = 0.5,   max_iter = 1000 )"},{"path":"https://mictott.github.io/BiocNMF/reference/calculateConsensusMatrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate consensus matrices using clustering approach (true cNMF) â calculateConsensusMatrices","text":"nmf_runs List NMF results RcppML::nmf k Integer, number factors feature_names Character vector feature names sample_names Character vector sample names density_threshold Numeric, threshold density filtering (default 0.5) max_iter Integer, maximum iterations k-means (default 1000)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/calculateConsensusMatrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate consensus matrices using clustering approach (true cNMF) â calculateConsensusMatrices","text":"List containing consensus matrices clustering information","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/calculateCopheneticCorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate cophenetic correlation for clustering quality assessment â calculateCopheneticCorrelation","title":"Calculate cophenetic correlation for clustering quality assessment â calculateCopheneticCorrelation","text":"Calculate cophenetic correlation clustering quality assessment","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/calculateCopheneticCorrelation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate cophenetic correlation for clustering quality assessment â calculateCopheneticCorrelation","text":"","code":"calculateCopheneticCorrelation(consensus_matrix)"},{"path":"https://mictott.github.io/BiocNMF/reference/calculateCopheneticCorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate cophenetic correlation for clustering quality assessment â calculateCopheneticCorrelation","text":"consensus_matrix Consensus matrix showing co-clustering frequencies","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/calculateCopheneticCorrelation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate cophenetic correlation for clustering quality assessment â calculateCopheneticCorrelation","text":"Cophenetic correlation coefficient","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/calculateStabilityMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate stability metrics for consensus NMF using clustering approach â calculateStabilityMetrics","title":"Calculate stability metrics for consensus NMF using clustering approach â calculateStabilityMetrics","text":"Calculate stability metrics consensus NMF using clustering approach","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/calculateStabilityMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate stability metrics for consensus NMF using clustering approach â calculateStabilityMetrics","text":"","code":"calculateStabilityMetrics(nmf_runs, consensus_result)"},{"path":"https://mictott.github.io/BiocNMF/reference/calculateStabilityMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate stability metrics for consensus NMF using clustering approach â calculateStabilityMetrics","text":"nmf_runs List NMF results consensus_result List consensus matrices clustering info","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/calculateStabilityMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate stability metrics for consensus NMF using clustering approach â calculateStabilityMetrics","text":"List stability metrics","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/cosine_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate cosine distance between vectors â cosine_distance","title":"Calculate cosine distance between vectors â cosine_distance","text":"Calculate cosine distance vectors","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/cosine_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate cosine distance between vectors â cosine_distance","text":"","code":"cosine_distance(x, y)"},{"path":"https://mictott.github.io/BiocNMF/reference/cosine_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate cosine distance between vectors â cosine_distance","text":"x First vector y Second vector","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/cosine_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate cosine distance between vectors â cosine_distance","text":"Cosine distance (1 - cosine similarity)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/findBestMatching.html","id":null,"dir":"Reference","previous_headings":"","what":"Find best matching between two factor matrices â findBestMatching","title":"Find best matching between two factor matrices â findBestMatching","text":"Find best matching two factor matrices","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/findBestMatching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find best matching between two factor matrices â findBestMatching","text":"","code":"findBestMatching(mat1, mat2)"},{"path":"https://mictott.github.io/BiocNMF/reference/findBestMatching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find best matching between two factor matrices â findBestMatching","text":"mat1 First matrix mat2 Second matrix","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/findBestMatching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find best matching between two factor matrices â findBestMatching","text":"List permutation correlation matrix","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getAvailableK.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available k values from cNMF results â getAvailableK","title":"Get available k values from cNMF results â getAvailableK","text":"Get available k values cNMF results","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getAvailableK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available k values from cNMF results â getAvailableK","text":"","code":"getAvailableK(x, name = \"cNMF\")"},{"path":"https://mictott.github.io/BiocNMF/reference/getAvailableK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available k values from cNMF results â getAvailableK","text":"x SingleCellExperiment object cNMF results name Character, name cNMF result (default \"cNMF\")","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getAvailableK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available k values from cNMF results â getAvailableK","text":"Integer vector available k values","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getAvailableK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available k values from cNMF results â getAvailableK","text":"","code":"# sce <- runConsensusNMF(sce, k_range = 5:10) # k_values <- getAvailableK(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/getBasis.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract NMF basis matrix from SingleCellExperiment object â getBasis","title":"Extract NMF basis matrix from SingleCellExperiment object â getBasis","text":"Extract NMF basis matrix SingleCellExperiment object","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getBasis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract NMF basis matrix from SingleCellExperiment object â getBasis","text":"","code":"getBasis(x, name = \"NMF\")"},{"path":"https://mictott.github.io/BiocNMF/reference/getBasis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract NMF basis matrix from SingleCellExperiment object â getBasis","text":"x SingleCellExperiment object NMF results name Character, name NMF result extract (default \"NMF\")","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getBasis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract NMF basis matrix from SingleCellExperiment object â getBasis","text":"Matrix features x factors (basis matrix)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getBasis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract NMF basis matrix from SingleCellExperiment object â getBasis","text":"","code":"# sce <- runNMF(sce, k = 10) # basis <- getBasis(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/getCoefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract NMF coefficient matrix from SingleCellExperiment object â getCoefficients","title":"Extract NMF coefficient matrix from SingleCellExperiment object â getCoefficients","text":"Extract NMF coefficient matrix SingleCellExperiment object","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getCoefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract NMF coefficient matrix from SingleCellExperiment object â getCoefficients","text":"","code":"getCoefficients(x, name = \"NMF\")"},{"path":"https://mictott.github.io/BiocNMF/reference/getCoefficients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract NMF coefficient matrix from SingleCellExperiment object â getCoefficients","text":"x SingleCellExperiment object NMF results name Character, name NMF result extract (default \"NMF\")","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getCoefficients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract NMF coefficient matrix from SingleCellExperiment object â getCoefficients","text":"Matrix cells x factors (coefficient matrix, reducedDim)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getCoefficients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract NMF coefficient matrix from SingleCellExperiment object â getCoefficients","text":"","code":"# sce <- runNMF(sce, k = 10) # coeffs <- getCoefficients(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/getConsensusGEPs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract consensus gene expression programs (GEPs) from cNMF results â getConsensusGEPs","title":"Extract consensus gene expression programs (GEPs) from cNMF results â getConsensusGEPs","text":"Extract consensus gene expression programs (GEPs) cNMF results","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getConsensusGEPs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract consensus gene expression programs (GEPs) from cNMF results â getConsensusGEPs","text":"","code":"getConsensusGEPs(x, name = \"cNMF\", k = NULL)"},{"path":"https://mictott.github.io/BiocNMF/reference/getConsensusGEPs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract consensus gene expression programs (GEPs) from cNMF results â getConsensusGEPs","text":"x SingleCellExperiment object cNMF results name Character, name cNMF result extract (default \"cNMF\") k Integer, k value extract. NULL, uses optimal k","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getConsensusGEPs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract consensus gene expression programs (GEPs) from cNMF results â getConsensusGEPs","text":"Matrix features x programs (consensus basis matrix)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getConsensusGEPs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract consensus gene expression programs (GEPs) from cNMF results â getConsensusGEPs","text":"","code":"# sce <- runConsensusNMF(sce, k_range = 5:10) # geps <- getConsensusGEPs(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/getConsensusNMFInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get consensus NMF information and parameters â getConsensusNMFInfo","title":"Get consensus NMF information and parameters â getConsensusNMFInfo","text":"Get consensus NMF information parameters","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getConsensusNMFInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get consensus NMF information and parameters â getConsensusNMFInfo","text":"","code":"getConsensusNMFInfo(x, name = \"cNMF\")"},{"path":"https://mictott.github.io/BiocNMF/reference/getConsensusNMFInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get consensus NMF information and parameters â getConsensusNMFInfo","text":"x SingleCellExperiment object cNMF results name Character, name cNMF result (default \"cNMF\")","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getConsensusNMFInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get consensus NMF information and parameters â getConsensusNMFInfo","text":"List cNMF run information (excluding large matrices)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getConsensusNMFInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get consensus NMF information and parameters â getConsensusNMFInfo","text":"","code":"# sce <- runConsensusNMF(sce, k_range = 5:10) # info <- getConsensusNMFInfo(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/getGEPUsage.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract GEP usage matrix from cNMF results â getGEPUsage","title":"Extract GEP usage matrix from cNMF results â getGEPUsage","text":"Extract GEP usage matrix cNMF results","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getGEPUsage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract GEP usage matrix from cNMF results â getGEPUsage","text":"","code":"getGEPUsage(x, name = \"cNMF\", k = NULL)"},{"path":"https://mictott.github.io/BiocNMF/reference/getGEPUsage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract GEP usage matrix from cNMF results â getGEPUsage","text":"x SingleCellExperiment object cNMF results name Character, name cNMF result extract (default \"cNMF\") k Integer, k value extract. NULL, uses optimal k","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getGEPUsage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract GEP usage matrix from cNMF results â getGEPUsage","text":"Matrix cells x programs (consensus usage matrix)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getGEPUsage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract GEP usage matrix from cNMF results â getGEPUsage","text":"","code":"# sce <- runConsensusNMF(sce, k_range = 5:10) # usage <- getGEPUsage(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/getOptimalK.html","id":null,"dir":"Reference","previous_headings":"","what":"Get optimal k value from cNMF results â getOptimalK","title":"Get optimal k value from cNMF results â getOptimalK","text":"Get optimal k value cNMF results","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getOptimalK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get optimal k value from cNMF results â getOptimalK","text":"","code":"getOptimalK(x, name = \"cNMF\")"},{"path":"https://mictott.github.io/BiocNMF/reference/getOptimalK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get optimal k value from cNMF results â getOptimalK","text":"x SingleCellExperiment object cNMF results name Character, name cNMF result (default \"cNMF\")","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getOptimalK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get optimal k value from cNMF results â getOptimalK","text":"Integer, optimal k value","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getOptimalK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get optimal k value from cNMF results â getOptimalK","text":"","code":"# sce <- runConsensusNMF(sce, k_range = 5:10) # k_opt <- getOptimalK(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/getStabilityMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get stability metrics from cNMF results â getStabilityMetrics","title":"Get stability metrics from cNMF results â getStabilityMetrics","text":"Get stability metrics cNMF results","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getStabilityMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get stability metrics from cNMF results â getStabilityMetrics","text":"","code":"getStabilityMetrics(x, name = \"cNMF\")"},{"path":"https://mictott.github.io/BiocNMF/reference/getStabilityMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get stability metrics from cNMF results â getStabilityMetrics","text":"x SingleCellExperiment object cNMF results name Character, name cNMF result extract (default \"cNMF\")","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getStabilityMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get stability metrics from cNMF results â getStabilityMetrics","text":"Data frame stability metrics k value","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getStabilityMetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get stability metrics from cNMF results â getStabilityMetrics","text":"","code":"# sce <- runConsensusNMF(sce, k_range = 5:10) # metrics <- getStabilityMetrics(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/getTopFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate feature loadings (which genes contribute most to each factor) â getTopFeatures","title":"Calculate feature loadings (which genes contribute most to each factor) â getTopFeatures","text":"Calculate feature loadings (genes contribute factor)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getTopFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate feature loadings (which genes contribute most to each factor) â getTopFeatures","text":"","code":"getTopFeatures(x, name = \"NMF\", n = 10)"},{"path":"https://mictott.github.io/BiocNMF/reference/getTopFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate feature loadings (which genes contribute most to each factor) â getTopFeatures","text":"x SingleCellExperiment object NMF results name Character, name NMF result use (default \"NMF\") n Integer, number top features return per factor (default 10)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getTopFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate feature loadings (which genes contribute most to each factor) â getTopFeatures","text":"List character vectors, containing top features factor","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getTopFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate feature loadings (which genes contribute most to each factor) â getTopFeatures","text":"","code":"# sce <- runNMF(sce, k = 10) # top_genes <- getTopFeatures(sce, n = 20)"},{"path":"https://mictott.github.io/BiocNMF/reference/getTopGEPFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Get top features for each consensus gene expression program â getTopGEPFeatures","title":"Get top features for each consensus gene expression program â getTopGEPFeatures","text":"Get top features consensus gene expression program","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getTopGEPFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get top features for each consensus gene expression program â getTopGEPFeatures","text":"","code":"getTopGEPFeatures(x, name = \"cNMF\", k = NULL, n = 20)"},{"path":"https://mictott.github.io/BiocNMF/reference/getTopGEPFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get top features for each consensus gene expression program â getTopGEPFeatures","text":"x SingleCellExperiment object cNMF results name Character, name cNMF result (default \"cNMF\") k Integer, k value use. NULL, uses optimal k n Integer, number top features per program (default 20)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getTopGEPFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get top features for each consensus gene expression program â getTopGEPFeatures","text":"List character vectors, top features GEP","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/getTopGEPFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get top features for each consensus gene expression program â getTopGEPFeatures","text":"","code":"# sce <- runConsensusNMF(sce, k_range = 5:10) # top_genes <- getTopGEPFeatures(sce, n = 20)"},{"path":"https://mictott.github.io/BiocNMF/reference/greedyMatching.html","id":null,"dir":"Reference","previous_headings":"","what":"Greedy matching for larger k â greedyMatching","title":"Greedy matching for larger k â greedyMatching","text":"Greedy matching larger k","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/greedyMatching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Greedy matching for larger k â greedyMatching","text":"","code":"greedyMatching(cor_mat)"},{"path":"https://mictott.github.io/BiocNMF/reference/greedyMatching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Greedy matching for larger k â greedyMatching","text":"cor_mat Correlation matrix","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/greedyMatching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Greedy matching for larger k â greedyMatching","text":"Best permutation vector","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/permutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate all permutations for small k â permutations","title":"Generate all permutations for small k â permutations","text":"Generate permutations small k","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/permutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate all permutations for small k â permutations","text":"","code":"permutations(k)"},{"path":"https://mictott.github.io/BiocNMF/reference/permutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate all permutations for small k â permutations","text":"k Integer, number elements","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/permutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate all permutations for small k â permutations","text":"Matrix permutations","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotGEPUsage.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot GEP usage in reduced dimension space â plotGEPUsage","title":"Plot GEP usage in reduced dimension space â plotGEPUsage","text":"Plot GEP usage reduced dimension space","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotGEPUsage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot GEP usage in reduced dimension space â plotGEPUsage","text":"","code":"plotGEPUsage(x, name = \"cNMF\", k = NULL, programs = 1:4, reduction = \"UMAP\")"},{"path":"https://mictott.github.io/BiocNMF/reference/plotGEPUsage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot GEP usage in reduced dimension space â plotGEPUsage","text":"x SingleCellExperiment object cNMF results name Character, name cNMF result (default \"cNMF\") k Integer, k value use. NULL, uses optimal k programs Integer vector, programs plot (default 1:4) reduction Character, reducedDim use coordinates (default \"UMAP\")","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotGEPUsage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot GEP usage in reduced dimension space â plotGEPUsage","text":"ggplot2 object","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotGEPUsage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot GEP usage in reduced dimension space â plotGEPUsage","text":"","code":"# sce <- runConsensusNMF(sce, k_range = 5:10) # sce <- runUMAP(sce) # plotGEPUsage(sce, programs = 1:4, reduction = \"UMAP\")"},{"path":"https://mictott.github.io/BiocNMF/reference/plotGEPs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gene expression programs (GEPs) heatmap â plotGEPs","title":"Plot gene expression programs (GEPs) heatmap â plotGEPs","text":"Plot gene expression programs (GEPs) heatmap","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotGEPs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gene expression programs (GEPs) heatmap â plotGEPs","text":"","code":"plotGEPs(x, name = \"cNMF\", k = NULL, programs = NULL, n_genes = 20)"},{"path":"https://mictott.github.io/BiocNMF/reference/plotGEPs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gene expression programs (GEPs) heatmap â plotGEPs","text":"x SingleCellExperiment object cNMF results name Character, name cNMF result (default \"cNMF\") k Integer, k value plot. NULL, uses optimal k programs Integer vector, programs plot (default ) n_genes Integer, number top genes per program show (default 20)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotGEPs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot gene expression programs (GEPs) heatmap â plotGEPs","text":"ggplot2 object","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotGEPs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot gene expression programs (GEPs) heatmap â plotGEPs","text":"","code":"# sce <- runConsensusNMF(sce, k_range = 5:10) # plotGEPs(sce, programs = 1:3, n_genes = 15)"},{"path":"https://mictott.github.io/BiocNMF/reference/plotStability.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot stability metrics from consensus NMF â plotStability","title":"Plot stability metrics from consensus NMF â plotStability","text":"Plot stability metrics consensus NMF","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotStability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot stability metrics from consensus NMF â plotStability","text":"","code":"plotStability(   x,   name = \"cNMF\",   metrics = c(\"stability\", \"silhouette\", \"reproducibility\") )"},{"path":"https://mictott.github.io/BiocNMF/reference/plotStability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot stability metrics from consensus NMF â plotStability","text":"x SingleCellExperiment object cNMF results name Character, name cNMF result (default \"cNMF\") metrics Character vector, metrics plot (default )","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotStability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot stability metrics from consensus NMF â plotStability","text":"ggplot2 object","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotStability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot stability metrics from consensus NMF â plotStability","text":"","code":"# sce <- runConsensusNMF(sce, k_range = 5:10) # plotStability(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/plotStabilityComparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot comparison of stability metrics across different k values â plotStabilityComparison","title":"Plot comparison of stability metrics across different k values â plotStabilityComparison","text":"Plot comparison stability metrics across different k values","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotStabilityComparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot comparison of stability metrics across different k values â plotStabilityComparison","text":"","code":"plotStabilityComparison(x, name = \"cNMF\")"},{"path":"https://mictott.github.io/BiocNMF/reference/plotStabilityComparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot comparison of stability metrics across different k values â plotStabilityComparison","text":"x SingleCellExperiment object cNMF results name Character, name cNMF result (default \"cNMF\")","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotStabilityComparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot comparison of stability metrics across different k values â plotStabilityComparison","text":"ggplot2 object","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/plotStabilityComparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot comparison of stability metrics across different k values â plotStabilityComparison","text":"","code":"# sce <- runConsensusNMF(sce, k_range = 5:15) # plotStabilityComparison(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/reconstructNMF.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconstruct original matrix from NMF factors â reconstructNMF","title":"Reconstruct original matrix from NMF factors â reconstructNMF","text":"Reconstruct original matrix NMF factors","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/reconstructNMF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconstruct original matrix from NMF factors â reconstructNMF","text":"","code":"reconstructNMF(x, name = \"NMF\")"},{"path":"https://mictott.github.io/BiocNMF/reference/reconstructNMF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconstruct original matrix from NMF factors â reconstructNMF","text":"x SingleCellExperiment object NMF results name Character, name NMF result use (default \"NMF\")","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/reconstructNMF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconstruct original matrix from NMF factors â reconstructNMF","text":"Reconstructed matrix (basis","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/reconstructNMF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reconstruct original matrix from NMF factors â reconstructNMF","text":"","code":"# sce <- runNMF(sce, k = 10) # reconstructed <- reconstructNMF(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/refitUsageMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Refit usage matrix using consensus spectra via non-negative least squares â refitUsageMatrix","title":"Refit usage matrix using consensus spectra via non-negative least squares â refitUsageMatrix","text":"step ensures final usage matrix optimally fitted original data using consensus gene expression programs","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/refitUsageMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refit usage matrix using consensus spectra via non-negative least squares â refitUsageMatrix","text":"","code":"refitUsageMatrix(data_matrix, consensus_spectra)"},{"path":"https://mictott.github.io/BiocNMF/reference/refitUsageMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refit usage matrix using consensus spectra via non-negative least squares â refitUsageMatrix","text":"data_matrix Original data matrix (features x samples) consensus_spectra Consensus basis matrix (features x factors)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/refitUsageMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refit usage matrix using consensus spectra via non-negative least squares â refitUsageMatrix","text":"Refitted usage matrix (factors x samples)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/runConsensusNMF.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Consensus Non-negative Matrix Factorization on SingleCellExperiment objects â runConsensusNMF","title":"Run Consensus Non-negative Matrix Factorization on SingleCellExperiment objects â runConsensusNMF","text":"Performs consensus NMF (cNMF) running multiple NMF iterations combining results identify stable gene expression programs. approach increases robustness accuracy compared single NMF runs.","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/runConsensusNMF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Consensus Non-negative Matrix Factorization on SingleCellExperiment objects â runConsensusNMF","text":"","code":"runConsensusNMF(   x,   k_range = 5:15,   n_runs = 100,   assay = \"logcounts\",   name = \"cNMF\",   subset_row = NULL,   tol = 1e-05,   maxit = 100,   L1 = c(0, 0),   seed = NULL,   verbose = TRUE,   n_cores = 1,   ... )"},{"path":"https://mictott.github.io/BiocNMF/reference/runConsensusNMF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Consensus Non-negative Matrix Factorization on SingleCellExperiment objects â runConsensusNMF","text":"x SingleCellExperiment SpatialExperiment object k_range Integer vector, range K values test (default 5:15) n_runs Integer, number NMF runs per K value (default 100) assay Character integer, assay use (default \"logcounts\") name Character, name storing results (default \"cNMF\") subset_row Vector specifying features use tol Numeric, tolerance convergence (default 1e-5) maxit Integer, maximum iterations per run (default 100) L1 Numeric vector length 2, L1 regularization [w, h] (default c(0,0)) seed Integer, random seed reproducibility verbose Logical, whether print progress (default TRUE) n_cores Integer, number cores parallel processing (default 1) ... Additional arguments passed RcppML::nmf","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/runConsensusNMF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Consensus Non-negative Matrix Factorization on SingleCellExperiment objects â runConsensusNMF","text":"input object cNMF results stored metadata(x)$cNMF   optimal usage matrix reducedDims","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/runConsensusNMF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Consensus Non-negative Matrix Factorization on SingleCellExperiment objects â runConsensusNMF","text":"","code":"# Single-cell example library(scuttle) sce <- mockSCE(ngenes = 500, ncells = 200) sce <- logNormCounts(sce) sce <- runConsensusNMF(sce, k_range = 5:10, n_runs = 20) #> Running consensus NMF with k_range=5:10, n_runs=20 #> Processing k=5 (1/6) #>   Stability: 0.007, Silhouette: 0.433 #> Processing k=6 (2/6) #>   Stability: 0.006, Silhouette: 0.539 #> Processing k=7 (3/6) #>   Stability: 0.005, Silhouette: 0.332 #> Processing k=8 (4/6) #>   Stability: 0.001, Silhouette: 0.412 #> Processing k=9 (5/6) #>   Stability: 0, Silhouette: 0.396 #> Processing k=10 (6/6) #>   Stability: 0, Silhouette: 0.515 #> Selected optimal k=6 based on combined method #>   Stability: 0.006 #>   Silhouette: 0.539 #>   Reproducibility: 0.2 #> Consensus NMF completed. Optimal k=6 #> Results stored in metadata(x)$cNMF$cNMF #> Optimal usage stored in reducedDim(x, 'cNMF')  # Access consensus results geps <- getConsensusGEPs(sce) usage <- getGEPUsage(sce)"},{"path":"https://mictott.github.io/BiocNMF/reference/runNMF.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Non-negative Matrix Factorization on SingleCellExperiment objects â runNMF","title":"Run Non-negative Matrix Factorization on SingleCellExperiment objects â runNMF","text":"Performs NMF using RcppML SingleCellExperiment SpatialExperiment objects stores results reducedDims slot metadata","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/runNMF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Non-negative Matrix Factorization on SingleCellExperiment objects â runNMF","text":"","code":"runNMF(   x,   k,   assay = \"logcounts\",   name = \"NMF\",   subset_row = NULL,   tol = 1e-05,   maxit = 100,   L1 = c(0, 0),   seed = NULL,   verbose = TRUE,   ... )"},{"path":"https://mictott.github.io/BiocNMF/reference/runNMF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Non-negative Matrix Factorization on SingleCellExperiment objects â runNMF","text":"x SingleCellExperiment SpatialExperiment object k Integer, number factors NMF (rank) assay Character integer, assay use (default \"logcounts\") name Character, name reducedDim slot (default \"NMF\") subset_row Vector specifying features use tol Numeric, tolerance convergence (default 1e-5) maxit Integer, maximum iterations (default 100) L1 Numeric vector length 2, L1 regularization [w, h] (default c(0,0)) seed Integer, random seed reproducibility verbose Logical, whether print progress (default TRUE) ... Additional arguments passed RcppML::nmf","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/runNMF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Non-negative Matrix Factorization on SingleCellExperiment objects â runNMF","text":"input object NMF results stored reducedDims(x, name)   metadata stored metadata(x)$NMF","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/runNMF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Non-negative Matrix Factorization on SingleCellExperiment objects â runNMF","text":"","code":"# Single-cell example library(scuttle) sce <- mockSCE() sce <- logNormCounts(sce) sce <- runNMF(sce, k = 10) #> Running NMF with k=10 factors... #>  #> iter |      tol  #> --------------- #>    1 | 7.94e-01 #>    2 | 4.50e-02 #>    3 | 2.07e-02 #>    4 | 1.12e-02 #>    5 | 6.73e-03 #>    6 | 4.26e-03 #>    7 | 2.89e-03 #>    8 | 2.02e-03 #>    9 | 1.45e-03 #>   10 | 1.05e-03 #>   11 | 7.89e-04 #>   12 | 6.28e-04 #>   13 | 5.15e-04 #>   14 | 4.34e-04 #>   15 | 3.74e-04 #>   16 | 3.23e-04 #>   17 | 2.79e-04 #>   18 | 2.39e-04 #>   19 | 2.08e-04 #>   20 | 1.83e-04 #>   21 | 1.60e-04 #>   22 | 1.41e-04 #>   23 | 1.23e-04 #>   24 | 1.10e-04 #>   25 | 9.85e-05 #>   26 | 8.81e-05 #>   27 | 7.89e-05 #>   28 | 7.14e-05 #>   29 | 6.50e-05 #>   30 | 5.84e-05 #>   31 | 5.23e-05 #>   32 | 4.69e-05 #>   33 | 4.24e-05 #>   34 | 3.87e-05 #>   35 | 3.55e-05 #>   36 | 3.28e-05 #>   37 | 3.00e-05 #>   38 | 2.77e-05 #>   39 | 2.57e-05 #>   40 | 2.39e-05 #>   41 | 2.22e-05 #>   42 | 2.08e-05 #>   43 | 1.94e-05 #>   44 | 1.83e-05 #>   45 | 1.73e-05 #>   46 | 1.63e-05 #>   47 | 1.55e-05 #>   48 | 1.47e-05 #>   49 | 1.42e-05 #>   50 | 1.37e-05 #>   51 | 1.32e-05 #>   52 | 1.28e-05 #>   53 | 1.24e-05 #>   54 | 1.22e-05 #>   55 | 1.19e-05 #>   56 | 1.15e-05 #>   57 | 1.11e-05 #>   58 | 1.08e-05 #>   59 | 1.06e-05 #>   60 | 1.03e-05 #>   61 | 1.00e-05 #>   62 | 9.76e-06 #> NMF completed. Results stored in reducedDim(x, 'NMF') #> Basis matrix stored in metadata(x)$NMF_basis  # Access NMF coefficients (cell loadings) nmf_coords <- reducedDim(sce, \"NMF\")  # Access basis matrix from metadata basis <- metadata(sce)$NMF_basis"},{"path":"https://mictott.github.io/BiocNMF/reference/selectOptimalK.html","id":null,"dir":"Reference","previous_headings":"","what":"Select optimal K from stability metrics â selectOptimalK","title":"Select optimal K from stability metrics â selectOptimalK","text":"Select optimal K stability metrics","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/selectOptimalK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select optimal K from stability metrics â selectOptimalK","text":"","code":"selectOptimalK(stability_metrics, method = \"combined\", verbose = TRUE)"},{"path":"https://mictott.github.io/BiocNMF/reference/selectOptimalK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select optimal K from stability metrics â selectOptimalK","text":"stability_metrics Data frame k, stability, silhouette, reproducibility method Character, method selection (default \"combined\") verbose Logical, whether print selection details","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/selectOptimalK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select optimal K from stability metrics â selectOptimalK","text":"Integer, optimal k value","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/solveNNLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve non-negative least squares problem â solveNNLS","title":"Solve non-negative least squares problem â solveNNLS","text":"Solves min ||Ax - b||^2 subject x >= 0","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/solveNNLS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve non-negative least squares problem â solveNNLS","text":"","code":"solveNNLS(A, b)"},{"path":"https://mictott.github.io/BiocNMF/reference/solveNNLS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve non-negative least squares problem â solveNNLS","text":"Matrix (features x factors) b Vector b (features)","code":""},{"path":"https://mictott.github.io/BiocNMF/reference/solveNNLS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve non-negative least squares problem â solveNNLS","text":"Non-negative solution vector x","code":""}]
